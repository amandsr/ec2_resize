name: EC2 Safe Resizer

on:
  workflow_dispatch:

jobs:
  analyze:
    runs-on: ubuntu-latest
    env:
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Read input.json and set variables
        id: read_json
        run: |
          echo "Reading input.json..."
          INSTANCE_ID=$(jq -r '.instance_id' input.json)
          REGION=$(jq -r '.region' input.json)
          DESIRED_INSTANCE_TYPE=$(jq -r '.desired_instance_type' input.json)
          REQUESTER_EMAIL=$(jq -r '.requester_email' input.json)
          APPROVER_EMAIL=$(jq -r '.approver_email' input.json)

          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
          echo "REGION=${REGION}" >> $GITHUB_ENV
          echo "DESIRED_INSTANCE_TYPE=${DESIRED_INSTANCE_TYPE}" >> $GITHUB_ENV
          echo "REQUESTER_EMAIL=${REQUESTER_EMAIL}" >> $GITHUB_ENV
          echo "APPROVER_EMAIL=${APPROVER_EMAIL}" >> $GITHUB_ENV

      - name: Output variables
        run: |
          echo "Instance ID: $INSTANCE_ID"
          echo "Region: $REGION"
          echo "Desired Instance Type: $DESIRED_INSTANCE_TYPE"
          echo "Requester Email: $REQUESTER_EMAIL"
          echo "Approver Email: $APPROVER_EMAIL"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Usage Analysis
        run: python scripts/analyze_recomend_groq.py "$INSTANCE_ID" "$REGION"

      - name: Print recomendations
        run: cat resize_recommendation.json

      - name: Upload Recommendation Artifact
        uses: actions/upload-artifact@v4
        with:
          name: recommendation
          path: resize_recommendation.json

  resize:
    needs: analyze
    runs-on: ubuntu-latest
    environment: production
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Read input.json and set variables
        id: read_json
        run: |
          echo "Reading input.json..."
          INSTANCE_ID=$(jq -r '.instance_id' input.json)
          REGION=$(jq -r '.region' input.json)
          echo "$INSTANCE_ID"
          echo "$REGION"

          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
          echo "REGION=${REGION}" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: pip install boto3

      - name: Download Recommendation
        uses: actions/download-artifact@v4
        with:
          name: recommendation

      - name: Take Snapshots & Prepare Rollback Data
        run: |
          python scripts/snapshots_and_save_rollback.py "$INSTANCE_ID" "$REGION"

      - name: Print Rollback Data
        run: cat rollback.json

      - name: Upload Rollback Data to S3
        run: |
          aws s3 cp rollback.json s3://${{ env.S3_BUCKET_NAME }}/rollback/${INSTANCE_ID}_rollback.json

      - name: Perform Safe Resize
        run: python scripts/resize_ec2.py

      - name: Notify (Optional)
        if: always()
        run: echo "Instance resized. Notification system can be integrated here."
